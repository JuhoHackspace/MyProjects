
title Sekvenssikaavio

participant Käyttötapaus
participant User
participant Frontend
participant Backend
participant Database
participant Finnkino
participant IMDB

loop #green jee joo jaa
note over Käyttötapaus:Search events
User->Frontend:/search
Frontend->Backend:GET: areas
Backend->Finnkino:(/xml/TheatreAreas/) get Area ID's
Finnkino->Backend:Api response XML(areas)
Backend->Frontend:Area ID's for search filtering JSON
Frontend->User:List of areas\nto a dropdown for user to choose from
User->Frontend:/search Select parameters(timeframe, theathre)
Frontend->Backend:GET: events with params(timeframe, area)
Backend->Finnkino: /xml/Schedule/ + params
Finnkino->Backend:Api response XML(events)
Backend->Frontend: Events list JSON
Frontend->User: Show events
end

loop #green Kaikilla ryhmän jäsenillä on mahdollisuus lisätä haettuja xxx, xxx ja äytösaikoja (G6) ryhmän sivulle.
note over Käyttötapaus: Post event to group
User->Frontend: Start posting event to group
Frontend->Backend: GET: groups with params(JWT)
Backend->Database: SELECT group_name, group_id by user_id
Database->Backend: List of group_names and group_id's
Backend->Frontend: JSON list of group_names and group_id's
Frontend->User: Show groups
User->Frontend:/search (Authenticated user) Post event to selected group
Frontend->Backend: post event with params(group id, event id)
Backend->Database: insert into events_
Database->Backend: affected rows(1 == ok)
Backend->Frontend: Post event status(ok, fail)
Frontend->User: Inform user
end

loop #green
note over Käyttötapaus: Search movies
User->Frontend: /search
note right of Frontend: Mahdolliset parametrit:\n- query string\n- include adult boolean\n- language string
Frontend->Backend:GET: /tmdb-proxy/3/search/movies with params
Backend->IMDB: GET: https://api.themoviedb.org/3/search/movie + params(api_key + params)
IMDB->Backend: JSON List of movies
Backend->Frontend:JSON List of movies
Frontend->User: Show movies
end

loop #green started 18.3 - tauno Sovelluksen tulee mahdollistaa käyttäjän luominen. Käyttäjä luodaan
antamalla käyttäjätunnus ja salasana, jotka mahdollistavat
kirjautumisen sovellukseen. Käyttäjätunnus on uniikki ja sitä
käytetään myös nimimerkkinä sovelluksessa.
note over Käyttötapaus: Create account
User->Frontend: /username & password
Frontend->Backend:POST: /username & password
Backend->Database: INSERT into Users username & hashed password
Database->Backend: Affected rows(1==ok, 0==fail)
Backend->Frontend: /succes/error
Frontend->User: /succes/error
end

loop #green started 18.3 - Käyttäjän tulee voida poistaa omat tunnuksensa. Samalla poistetaan
myös kaikki käyttäjän kustomoitu data.
note over Käyttötapaus: Delete account
User->Frontend: /poista käyttäjä
note left of Database: Procedure? DELETE cascade: reviews, favourites ?
Frontend->Backend: DELETE: with params(JWT)
Backend->Database: DELETE from Users_ by user_id
Database->Backend: /succes/error
Backend->Frontend: /succes/error
Frontend->User: /succes/error
end

loop #green
note over Käyttötapaus:Login
User->Frontend: credentials
Frontend->Backend: POST: login as X with params(user_name & password)
Backend->Database: SELECT password by user_name;
Database->Backend: hashed password or not found
Backend->Frontend: session id/authentication response(JWT) or invalid credentials
Frontend->User: success or failure
end

note over Käyttötapaus: Logout
User->Frontend: /logout

loop #pink nonrequired feature
note over Käyttötapaus: Edit profile
User->Frontend: /profile/edit
Frontend->Backend: Edit Profile Params:\n(userId, userName, password_hash)
Backend ->Database:UPDATE userName, password_hash
Database ->Backend: Response status
Backend ->Frontend: Response status
Frontend->User: Show information: Success/failure
end

loop #green
note over Käyttötapaus: Add to favourites (movie) extends search movies & events
note right of User: movie_tmdb_id has been acquiredfrom searching \nTMDD prior to adding a favourite.
User->Frontend: /add to favourites
Frontend->Backend: POST: movie_tmdb_id, JWT token (sub claim on user id)
Backend->Database: INSERT into Favourites_ by movie_id & user_id
Database->Backend: Affected rows(1==ok, 0==fail)
Backend->Frontend: 201 | error code
Frontend->User: success/failure
end

loop #green Kirjautunut käyttäjä voi jakaa oman suosikkilistansa URI-osoitteena muiden nähtäväksi. G15 Sovelluksen vapaavalintainen lisäominaisuus.
note over Käyttötapaus: Share favouritelist
User->Frontend: /share
Frontend -> Backend:GET /share/get-slur  params(JWT sub)
Backend -> Database: UPDATE Favorites table to have generated slur for user
Database -> Backend: success or not
Backend -> Frontend: slur || error code
Frontend -> User: copy url with slur to clipboard and show notice
end


loop #green 
note over Käyttötapaus: Create Group
note over Käyttötapaus: Kirjautunut käyttäjä voi luoda uuden ryhmän valitsemallaan nimellä.\n Ryhmällä on oma näkymä, jonka saa näkyviin vain ryhmän jäsen.\n Lista luoduista ryhmistä (ryhmien nimet ja kuvaukset) tulee näkyä\n kirjautumatta sovelluksessa. Omistaja voi myös poistaa ryhmän.
 
User->Frontend:ryhmänNimi, ryhmän kuvaus

Frontend -> Backend: POST groupName, groupdescription

Backend ->Database:Create group, groupname, group description

Database -> Backend: succes or not

Backend -> Frontend: 201 || 401 

Frontend -> User: succes or not 

end

loop #green
note over Käyttötapaus:See groups as list
note over Käyttötapaus: <color:#orange>Has a follow-up use-case: Join group</color>
User->Frontend: /community/groups
Frontend->Backend: GET a list of groups. Optional params:\n   max items per page (defaults to 0, infinite)\n   nth page (defaults to 1)
Backend->Database: SELECT
Database->Backend: List of groups ({groupId: .., groupName: .., groupDescription: .., userId: ..})
Backend->Frontend: List of groups, pagenum and num pages
Frontend->User: User is being shown a list of groups.
end

loop #green
note over Käyttötapaus: View group movies
User->Frontend: community/groups/:group_id/movies
Frontend->Backend: GET group movies with params(group_id)

Backend->Database: SELECT group movies by group_id
Database->Backend: List of group movie id's
Backend->IMDB: api.themoviedb.org/3/discover/movie + params(List of movie id's)
IMDB->Backend: JSON list of movies
Backend->Frontend: JSON List of movies
Frontend->User: Show group movies
end

loop #gray
note over Käyttötapaus: Join group extends see groups as list
User->Frontend:Reguest to join a group
Frontend->Backend: POST join request params (userId/jwt, groupId)
Backend ->Database: Insert status=pending, userid, groupid
Database ->Backend: rows = 1 OK or 0 = error
Backend ->Frontend: success 201 /failure 500
Frontend ->User: status - pending
Frontend->Backend
end

loop #pink 
note over Käyttötapaus: Resolve Open Requests
note over Käyttötapaus: every 5 minutes
Frontend->Backend: GET: show open requests
Backend->Database:Select userID, pending requests
Database->Backend:rows, requests
Backend->Frontend:open requests
Frontend->User: You have open requests
User->Frontend: Accept/Discard
Frontend ->Backend: POST Accept/Discard (userId, groupId, status)
Backend ->Database: UPDATE (userId, groupId, status)
Database ->Backend :succees/fail
Backend ->Frontend: 200/500
Frontend ->User: resolved

end

note over Käyttötapaus: Leave Group
User->Frontend: /profile/groups/groupX

loop #gray
note over Käyttötapaus: Delete group
User->Frontend: /profile/groups/groupX
Frontend--#red:4>User:Are you sure?
User--#green:4>Frontend: Yes, delete

Frontend->Backend:DELETE groupId
Backend->Database:DELETE groupId
Database->Backend:Response status
Backend->Frontend:Response status
Frontend->User:Response status

end
note over Käyttötapaus: Delete user from group

note over Käyttötapaus: Handle group join requests
User->Frontend: /profile/groups/groupX

note over Käyttötapaus: Post reviews
User->Frontend: /community/reviews/newreview

note over Käyttötapaus: Read reviews
User->Frontend: /community/reviews

note over Käyttötapaus: Edit review
User->Frontend: /profile/reviews/reviewX

note over Käyttötapaus: Delete reviews
User->Frontend: /profile/reviews/reviewX

note over Käyttötapaus: Ban or unban user

